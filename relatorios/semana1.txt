spojbr_minhoca.cpp
Autor: Victor
Usuário: Blek
Solução:
A solução para o problema consiste em verificar o maior valor dentre as
somas de cada coluna e de cada linha. O maior valor encontrado corresponde
ao maior número de minhocas que pode ser coletado.

spojbr_obihanoi.cpp
Autor: Victor
Usuário: Blek
Solução:
A estratégia ótima para resolver o problema da Torre de Hanoi envolve o
seguinte algoritmo recursivo. Assumindo que os mastros sejam nomeados como
A, B e C, um disco com n - 1 discos acima dele pode ser movido de A para C
da seguinte maneira:
- Move n - 1 discos de A para B
- Move o disco de A para C
- Move os n - 1 discos de B para C.
O número de passos, expandindo a recorrência que surge, necessário para ter-
minar o algoritmo equivale a 2^1 + 2^2 + ... + 2^(n - 1) = 2 ^ n - 1 passos.
Dessa maneira, o programa escrito calcula o valor de 2 ^ n - 1.

spojbr_paprimas.cpp
Autor: Lucas
Usuário: lucasaug
Solução:
Como o maior valor possível de entrada
é uma string de 20 caracteres composta
pela letra Z (valor 1040), podemos calcular
todos os números primos até a raiz de 1040,
e para testar a primalidade das strings recebidas
basta tentar dividí-las por todos os números
primos calculados.

spojbr_querm.cpp
Autor: Lucas
Usuário: lucasaug
Solução:
Para cada caso de teste o programa lê os ingressos
na ordem e assim que encontra um valor igual ao número
de ingressos checados até o momento, exibe-o na saída
e passa para o próximo teste.

uri_1041.c
Autor: Jonatas
Usuário: Jonatas Cavalcante
Solução:
Para solucionar esse problema, o algoritmo lê as coordenadas X e Y da entrada
e, através de 6 condicionais, determina o quadrante onde a mesma encontra-se.
Caso a primeira coordenada seja igual a 0, ele avalia a segunda coordenada.
Caso ela também seja igual a 0, o programa imprime “Origem” e, caso contrário,
imprime “Eixo Y”. Se a primeira coordenada não seja igual a 0 e a segunda seja,
o algoritmo imprime “Eixo X”. Se ambas coordenadas forem positivas e maiores
que 0, imprime “Q1”. Se a primeira é negativa e a segunda maior que 0, imprime
“Q2”. Se ambas forem negativas, imprime “Q3”. E no caso da primeira for maior
que 0 e a segunda negativa, imprime “Q4”.


uri_1080.cpp
Autor: Renato
Usuário: 29916 (renatoutsch@gmail.com)
Solução:
Para resolver esse problema, eu usei duas variáveis para salvar o maior
número e a sua posição, e sempre que encontrasse um número maior eu salvo
esses dados. Inicializo o maior número como INT_MIN, então sempre vai ser
possível achar um maior.

uri_1161.c
Autor: Renato
Usuário: 29916 (renatoutsch@gmail.com)
Solução:
Calcula a soma de dois fatoriais através de uma função que calcula o
fatorial iterativamente, começando do maior número e multiplicando até o
menor deles.

uri_1542.c
Autor: Jonatas
Usuário: Jonatas Cavalcante
Solução:
Para solucionar esse problema, o algoritmo lê a quantidade de páginas Q lidas
por dia, o número de dias D que você adiantaria a leitura caso estivesse
lendo a quantidade de páginas P. Através da igualdade P*(X - D) = QX, onde X
é quantidade de dias gastos lendo a quantidade Q de páginas diariamente, é
possível descobrir o valor de X. Após isso, multiplicando-se essa quantidade
de páginas Q lidas por dia pela quantidade de dias X, obtemos a quantidade de
páginas do livro.

