spojbr_duende.cpp
Autor: Jonatas
Usuário: Jonatas Cavalcante
Solução:
Para solucionar esse problema é construída uma matriz de adjacência que repre-
senta a caverna e, cada posição tem o valor que é passado na entrada do pro-
grama. Após isso, é aplicado o algoritmo da busca em largura, iniciando-se na
posição inicial do duende. Para cada posição visitada, são geradas as outras
próximas posições e cada uma delas é visitada, obedecendo às dimensões da ma-
triz original e, caso a posição a ser visitada tenha valor 2, que representa
parede de cristal, ela não é visitada. A cada posição visitada, a quantidade
de passos é armazenada baseando-se na quantidade de passos da posição anterior
adicionado de uma unidade. Assim sendo, o programa pára quando encontra a pri-
meira posição com valor 0, que indica saíd, e exibe a quantidade de passos que
foram necessário para chegar nela.

spojbr_irevir.cpp
Autor: Victor
Usuário: Blek
Solução:
O problema consiste em descobrir se há apenas um componente fortemente cone-
xo no grafo formado pelas interseções e ruas. Isso foi feito por meio do al-
goritmo de Kosaraju. Esse algoritmo realiza uma busca em profundidade no gra-
fo a partir de um vértice arbitrário e salva os vértices em uma lista quando
eles são fechados. Depois, é realizado outro DFS, partindo dos vértices na
ordem inversa à da lista gerada previamente. Se esse DFS revela apenas um
componente, há apenas um componente fortemente conectado no grafo.
A implementação realizada é um pouco diferente. Não é necessário guardar a
lista de fechamento de vértices. Basta notar se o vértice que abriu a busca
é o mesmo a fechar por último. Depois, é realizado o DFS novamente partindo
desse mesmo vértice, conferindo o mesmo critério.

spojbr_mesa.cpp
Autor: Victor
Usuário: Blek
Solução:
O problema consiste em determinar se o grafo é bipartido ou não. Isso pode
ser feito tentando colorir o grafo com duas cores alternadamente. Se isso
se mostra impossível em algum momento, o grafo não pode ser bipartido.
Na prática, a coloração foi realizada através de um DFS que, ao encontrar um
novo vértice, colore esse vértice com a cor oposta à do vértice anterior. Se
o algoritmo encontra um vértice já colorido com a mesma cor do vértice atual,
isso significa que o novo vértice não pode ser colorido com a cor oposta do
atual. Portanto, o grafo não é bipartido. Se o DFS termina sem problemas, o
grafo é bipartido.

spojbr_natureza.cpp
Autor: Renato
Usuário: renatoutsch
Solução:
Esse problema foi resolvido usando um map de strings (nome do animal) para
um set de outras strings (animais aos quais o animal é ligado na cadeia
alimentar). O nome dos animais iniciais não é necessário, e portanto essa parte
da entrada é ignorada. Após isso, para cada aresta do grafo lida é adicionada
uma entrada no gravo em ambas as direções, de modo a criar um grafo não
direcionado.
Para a contagem da cadeia alimentar, uma busca em profundidade simples foi
usada. Essa busca removia do grafo cada nó por onde passava, enquanto aumentava
a contagem de nós. Desse modo, todo o subgrafo era removido do grafo inicial,
gerando a contagem de membros da cadeia. Essa operação era repetida até o grafo
ficar vazio e, finalmente, a maior das cadeias era impressa.

spojbr_orkut.cpp
Autor: Lucas
Usuário:
Solução:
Para resolver esse problema, recebemos as exigências de
cada amigo. Armazenamos o grafo de exigências em uma
lista de adjacências. Realizamos a ordenação topológica
da seguinte forma: Passamos por todos os vértices e
armazenamos aqueles nos quais não incidem arestas em uma
fila. Ordenamos essa fila por ordem de entrada, e pegamos
o primeiro elemento dessa fila, colocando-o na lista já
ordenada. Retiramos esse elemento da lista de exigências
dos outros amigos, e repetimos o processo até que não hajam
mais elementos sem arestas incidentes. Caso a lista de resultados
tenha todos os amigos informados, exibimos essa lista na
saída. Do contrário, exibimos a palavra "impossivel".


spojbr_pedagio.cpp
Autor: Jonatas
Usuário: Jonatas Cavalcante
Solução:
Para solucionar esse problema, a partir da entrada, é montada uma matrix de
adjacência binária, onde a posição [i][j] indica se há uma estrada entre as ci-
dades i+1 e j+1. Após isso, a partir da posição inicial, passada pela entrada
do programa, o algoritmo calcula, através da busca em largura, quantos pedágios
seriam pagos para todas as demais cidades e armazena esse valor em um vetor de
N posições, onde N é o número de cidades. Ao terminar esse cálculo, o programa
percorre esse vetor e imprime na saída todas as posições em que a quantidade de
pedágios é menor ou igual ao valor que pode ser pago.


uri_1469.cpp
Autor: Renato
Usuário: 29916 (renatoutsch@gmail.com)
Solução:
Esse problema foi resolvido adicionando as arestas dos nós de maneira invertida:
a cada entrada de par de trabalhador e chefe, uma aresta era adicionada no sentido
de que o trabalhador possui tal chefe. Após isso, ao fazer um swap apenas a idade
é trocada, e um vetor de nomes é usado para manter referência de qual nome se refere
a qual trabalhador.
Após tudo isso, apenas um algoritmo de BFS (ou DFS iterativo, o recursivo dá
time limit) simples encontra o chefe de menor idade.

UVa_11060.cpp
Autor: Lucas
Usuário:
Solução:


