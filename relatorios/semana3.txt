spoj_allizzwell.cpp
Autor: Renato
Usuário:
Solução:
Resolvi esse problema usando uma matriz. Inicialmente leio todas as letras
para a matriz e aí utilizo depth first search, checando em todos os elementos
ao redor de um nó, para ver se encontro o próximo. Também marco cada elemento
que foi visitado para não repetir letras que já foram usadas.
Chamo o algoritmo de DFS iniciando em cada elemento da matriz, para ver se em
ao menos um dos elementos a string é encontrada.

spoj_invcnt.cpp
Autor: Renato
Usuário:
Solução:
Esse problema foi resolvido usando o algoritmo MergeSort: aproveitamos que é
possível contar a quantidade de inversões enquanto executamos o MergeSort,
pois é possível contar quantas inversões há em um bloco no passo de merge do
MergeSort de maneira eficiente. Como o MergeSort executa em O(nlogn), em que n
é o tamanho da array, o algoritmo de cálculo de quantidade de inversões tem
essa complexidade.
Esse problema, portanto, foi um exemplo de Divisão e Conquista, paradigma
empregado no MergeSort top down.

spojbr_assaltmg.cpp
Autor: Victor
Usuário: Blek
Solução:
A solução proposta itera por todas as combinações possíveis de diretores,
em ordem crescente de tamanho da combinação. Para cada combinação, é feita
a união do conjunto de chaves dos diretores combinados através de operações
bit-a-bit. Caso a união tenha o número de chaves necessário, esse valor é
impresso. Se nenhuma combinação consegue cumprir esse valor, é impossível
abrir o cofre.

spojbr_banda09.cpp
Autor: Jonatas
Usuário: Jonatas Cavalcante
Solução:
Para solucionar esse problema, a partir da entrada, é montada uma matriz de
adjacência, onde o valor da posição [i][j] da matriz armazena o grau afinidade
dos cantores de índice i+1, j+1. Após isso, o algoritmo percorre todas as pos-
sivéis combinações de três cantores, através de três laços for, e armazenando
os indíces que representam os três cantores com maior afinidade encontrada.
E, após percorrer todas essas posições, o programa imprime os mesmos na saída.

spojbr_domino.cpp
Autor: Victor
Usuário: Blek
Solução:
A solução proposta cria um mapeamento entre cada peça de dominó (ou seja, o
par de valores impresso na sua face) e o seu identificador numérico.
Posteriormente, é lida a matriz de valores dispostos no tabuleiro e o pro-
grama tenta, por meio de força bruta com backtracking, dispor peças de domi-
nó de todas as formas possíveis.
Caso o programa consiga preencher o tabuleiro até o final, sem contradições
ou repetição de peças, é somado 1 ao contador de tabuleiros válidos. Caso
contrário, no momento em que não há configurações válidas de peças, o pro-
grama recua a estados anteriores, desfazendo as jogadas realizadas.

spojbr_junina.cpp
Autor: Lucas
Usuário:
Solução:
Para cada caso de teste, construímos um grafo onde cada
aluno é um vértice, e para dois alunos A e B, só existe
uma aresta entre eles caso A e B não tenham inimizade.
A seguir, entre todos os grupos testamos quais podem
existir sem que pessoas inimigas fiquem juntas. Não
testamos todas as possibilidades, pois se temos dois
alunos A e B que tem inimizade, não há necessidade de
testar nenhum grupo que contenha ambos os alunos.
Para percorrer os grupos utilizamos um processo de backtracking,
onde as escolhas consistem em adicionar ou não determinado aluno.
Armazenamos as linhas da matriz de adjacência do grafo e
os grupos testados como um número inteiro de 32 bits, e
utilizamos operações bitwise para operar sobre esses valores.
Por fim, é importante notar que da forma como foi construído,
esse algoritmo consiste em encontrar a maior clique em um grafo.

spojbr_megadama.cpp
Autor: Lucas
Usuário:
Solução:
Armazenamos o tabuleiro em uma matriz. As posições
das nossas peças também são armazenadas em um vetor
para facilitar sua varredura. Para cada peça nossa
existente, utilizamos backtracking para checar todas
as formas possíveis de movimentá-la: Usamos uma função
recursiva que move uma peça para uma posição e chama a si
mesma para cada movimento possível restante. Caso
não haja nenhum movimento restante, a função retorna 0,
indicando que não é possível ganhar mais nenhuma peça a
partir dali. Do contrário, retorna a quantidade de peças
que podem ser ganhas a partir dessa posição.

spojbr_tesour11.cpp
Autor: Jonatas
Usuário: Jonatas Cavalcante
Solução:
Para solucionar esse problema, a partir da entrada, é montada uma matriz de ad-
jacência, e cada posição da matriz possui um valor D, que representa a quanti-
dade de passos de capitão que a posição corrente possui, sendo que esse valor
é passado na entrada e, caso a posição não tenha nenhum peso na entrada, ela
vale 0. Além disso, há também um vetor de pares que armazena as pistas passadas
na entrada no programa. Após armazenar os dados da entrada nas estruturas men-
cionadas, o algoritmo percorre, através de três laços for alinhados, cada uma
das posições, que não fazem parte do vetor de pistas, e calcula sua distância
para cada uma das pistas. Caso o valor calculado coincida com o valor D da po-
sição, essa posição é uma possível localização do tesouro e ela é decrementada.
Ao fim do programa, é verificado se há apenas uma possível posição e, em caso
afirmativo, ele retorna a posição da mesma. Caso contrário, é impresso -1, -1.
